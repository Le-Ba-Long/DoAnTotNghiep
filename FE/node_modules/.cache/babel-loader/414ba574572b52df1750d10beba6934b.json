{"ast":null,"code":"import _slicedToArray from \"F:/Do An Tot Nghiep/FE/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nexport var useOpenState = function useOpenState(_ref) {\n  var open = _ref.open,\n      onOpen = _ref.onOpen,\n      onClose = _ref.onClose;\n  var isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      openState = _React$useState2[0],\n      setIsOpenState = _React$useState2[1]; // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n\n\n  React.useEffect(function () {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  var setIsOpen = React.useCallback(function (newIsOpen) {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen: setIsOpen\n  };\n};","map":{"version":3,"names":["React","useOpenState","open","onOpen","onClose","isControllingOpenProp","useRef","current","useState","openState","setIsOpenState","useEffect","Error","setIsOpen","useCallback","newIsOpen","isOpen"],"sources":["F:/Do An Tot Nghiep/FE/node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.js"],"sourcesContent":["import * as React from 'react';\nexport const useOpenState = ({\n  open,\n  onOpen,\n  onClose\n}) => {\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [openState, setIsOpenState] = React.useState(false); // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  const setIsOpen = React.useCallback(newIsOpen => {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen\n  };\n};"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAItB;EAAA,IAHJC,IAGI,QAHJA,IAGI;EAAA,IAFJC,MAEI,QAFJA,MAEI;EAAA,IADJC,OACI,QADJA,OACI;EACJ,IAAMC,qBAAqB,GAAGL,KAAK,CAACM,MAAN,CAAa,OAAOJ,IAAP,KAAgB,SAA7B,EAAwCK,OAAtE;;EACA,sBAAoCP,KAAK,CAACQ,QAAN,CAAe,KAAf,CAApC;EAAA;EAAA,IAAOC,SAAP;EAAA,IAAkBC,cAAlB,uBAFI,CAEuD;EAC3D;;;EAEAV,KAAK,CAACW,SAAN,CAAgB,YAAM;IACpB,IAAIN,qBAAJ,EAA2B;MACzB,IAAI,OAAOH,IAAP,KAAgB,SAApB,EAA+B;QAC7B,MAAM,IAAIU,KAAJ,CAAU,oEAAV,CAAN;MACD;;MAEDF,cAAc,CAACR,IAAD,CAAd;IACD;EACF,CARD,EAQG,CAACG,qBAAD,EAAwBH,IAAxB,CARH;EASA,IAAMW,SAAS,GAAGb,KAAK,CAACc,WAAN,CAAkB,UAAAC,SAAS,EAAI;IAC/C,IAAI,CAACV,qBAAL,EAA4B;MAC1BK,cAAc,CAACK,SAAD,CAAd;IACD;;IAED,IAAIA,SAAS,IAAIZ,MAAjB,EAAyB;MACvBA,MAAM;IACP;;IAED,IAAI,CAACY,SAAD,IAAcX,OAAlB,EAA2B;MACzBA,OAAO;IACR;EACF,CAZiB,EAYf,CAACC,qBAAD,EAAwBF,MAAxB,EAAgCC,OAAhC,CAZe,CAAlB;EAaA,OAAO;IACLY,MAAM,EAAEP,SADH;IAELI,SAAS,EAATA;EAFK,CAAP;AAID,CAnCM"},"metadata":{},"sourceType":"module"}