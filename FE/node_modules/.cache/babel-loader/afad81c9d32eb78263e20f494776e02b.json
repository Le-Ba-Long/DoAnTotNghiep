{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // This object is not Partial<PickersLocaleText> because it is the default values\n\nvar enUSPickers = {\n  // Calendar navigation\n  previousMonth: 'Previous month',\n  nextMonth: 'Next month',\n  // View navigation\n  openPreviousView: 'open previous view',\n  openNextView: 'open next view',\n  calendarViewSwitchingButtonAriaLabel: function calendarViewSwitchingButtonAriaLabel(view) {\n    return view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view';\n  },\n  inputModeToggleButtonAriaLabel: function inputModeToggleButtonAriaLabel(isKeyboardInputOpen, viewType) {\n    return isKeyboardInputOpen ? \"text input view is open, go to \".concat(viewType, \" view\") : \"\".concat(viewType, \" view is open, go to text input view\");\n  },\n  // DateRange placeholders\n  start: 'Start',\n  end: 'End',\n  // Action bar\n  cancelButtonLabel: 'Cancel',\n  clearButtonLabel: 'Clear',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Today',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Select date',\n  dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  timePickerDefaultToolbarTitle: 'Select time',\n  dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: function clockLabelText(view, time, adapter) {\n    return \"Select \".concat(view, \". \").concat(time === null ? 'No time selected' : \"Selected time is \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: function hoursClockNumberText(hours) {\n    return \"\".concat(hours, \" hours\");\n  },\n  minutesClockNumberText: function minutesClockNumberText(minutes) {\n    return \"\".concat(minutes, \" minutes\");\n  },\n  secondsClockNumberText: function secondsClockNumberText(seconds) {\n    return \"\".concat(seconds, \" seconds\");\n  },\n  // Open picker labels\n  openDatePickerDialogue: function openDatePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Choose date, selected date is \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Choose date';\n  },\n  openTimePickerDialogue: function openTimePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Choose time, selected time is \".concat(utils.format(utils.date(rawValue), 'fullTime')) : 'Choose time';\n  },\n  // Table labels\n  timeTableLabel: 'pick time',\n  dateTableLabel: 'pick date'\n};\nexport var DEFAULT_LOCALE = enUSPickers;\nexport var enUS = getPickersLocalization(enUSPickers);","map":{"version":3,"names":["getPickersLocalization","enUSPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerDefaultToolbarTitle","dateTimePickerDefaultToolbarTitle","timePickerDefaultToolbarTitle","dateRangePickerDefaultToolbarTitle","clockLabelText","time","adapter","format","hoursClockNumberText","hours","minutesClockNumberText","minutes","secondsClockNumberText","seconds","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","DEFAULT_LOCALE","enUS"],"sources":["F:/Do An Tot Nghiep/FE/node_modules/@mui/x-date-pickers/locales/enUS.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\n// This object is not Partial<PickersLocaleText> because it is the default values\nconst enUSPickers = {\n  // Calendar navigation\n  previousMonth: 'Previous month',\n  nextMonth: 'Next month',\n  // View navigation\n  openPreviousView: 'open previous view',\n  openNextView: 'open next view',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Start',\n  end: 'End',\n  // Action bar\n  cancelButtonLabel: 'Cancel',\n  clearButtonLabel: 'Clear',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Today',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Select date',\n  dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  timePickerDefaultToolbarTitle: 'Select time',\n  dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} hours`,\n  minutesClockNumberText: minutes => `${minutes} minutes`,\n  secondsClockNumberText: seconds => `${seconds} seconds`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choose date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Choose time',\n  // Table labels\n  timeTableLabel: 'pick time',\n  dateTableLabel: 'pick date'\n};\nexport const DEFAULT_LOCALE = enUSPickers;\nexport const enUS = getPickersLocalization(enUSPickers);"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC,C,CACA;;AACA,IAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,gBAFG;EAGlBC,SAAS,EAAE,YAHO;EAIlB;EACAC,gBAAgB,EAAE,oBALA;EAMlBC,YAAY,EAAE,gBANI;EAOlBC,oCAAoC,EAAE,8CAAAC,IAAI;IAAA,OAAIA,IAAI,KAAK,MAAT,GAAkB,4CAAlB,GAAiE,4CAArE;EAAA,CAPxB;EAQlBC,8BAA8B,EAAE,wCAACC,mBAAD,EAAsBC,QAAtB;IAAA,OAAmCD,mBAAmB,4CAAqCC,QAArC,uBAA0DA,QAA1D,yCAAtD;EAAA,CARd;EASlB;EACAC,KAAK,EAAE,OAVW;EAWlBC,GAAG,EAAE,KAXa;EAYlB;EACAC,iBAAiB,EAAE,QAbD;EAclBC,gBAAgB,EAAE,OAdA;EAelBC,aAAa,EAAE,IAfG;EAgBlBC,gBAAgB,EAAE,OAhBA;EAiBlB;EACAC,6BAA6B,EAAE,aAlBb;EAmBlBC,iCAAiC,EAAE,oBAnBjB;EAoBlBC,6BAA6B,EAAE,aApBb;EAqBlBC,kCAAkC,EAAE,mBArBlB;EAsBlB;EACAC,cAAc,EAAE,wBAACd,IAAD,EAAOe,IAAP,EAAaC,OAAb;IAAA,wBAAmChB,IAAnC,eAA4Ce,IAAI,KAAK,IAAT,GAAgB,kBAAhB,8BAAyDC,OAAO,CAACC,MAAR,CAAeF,IAAf,EAAqB,UAArB,CAAzD,CAA5C;EAAA,CAvBE;EAwBlBG,oBAAoB,EAAE,8BAAAC,KAAK;IAAA,iBAAOA,KAAP;EAAA,CAxBT;EAyBlBC,sBAAsB,EAAE,gCAAAC,OAAO;IAAA,iBAAOA,OAAP;EAAA,CAzBb;EA0BlBC,sBAAsB,EAAE,gCAAAC,OAAO;IAAA,iBAAOA,OAAP;EAAA,CA1Bb;EA2BlB;EACAC,sBAAsB,EAAE,gCAACC,QAAD,EAAWC,KAAX;IAAA,OAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,2CAAmFC,KAAK,CAACT,MAAN,CAAaS,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAAnF,IAAsI,aAA3J;EAAA,CA5BN;EA6BlBI,sBAAsB,EAAE,gCAACJ,QAAD,EAAWC,KAAX;IAAA,OAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,2CAAmFC,KAAK,CAACT,MAAN,CAAaS,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAAnF,IAAsI,aAA3J;EAAA,CA7BN;EA8BlB;EACAK,cAAc,EAAE,WA/BE;EAgClBC,cAAc,EAAE;AAhCE,CAApB;AAkCA,OAAO,IAAMC,cAAc,GAAGtC,WAAvB;AACP,OAAO,IAAMuC,IAAI,GAAGxC,sBAAsB,CAACC,WAAD,CAAnC"},"metadata":{},"sourceType":"module"}