{"ast":null,"code":"import _regeneratorRuntime from \"F:/Do An Tot Nghiep/FE/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"F:/Do An Tot Nghiep/FE/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport jwt from 'jsonwebtoken';\nimport Mock from '../mock';\nvar JWT_SECRET = 'jwt_secret_key';\nvar JWT_VALIDITY = '7 days';\nvar userList = [{\n  id: 1,\n  role: 'ADMIN',\n  name: 'Jason Alexander',\n  username: 'jason_alexander',\n  email: 'jason@ui-lib.com',\n  avatar: '/assets/images/face-6.jpg',\n  age: 25\n}]; // FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\n\nMock.onPost('/api/auth/login').reply( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n    var _JSON$parse, email, user, accessToken;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 1000);\n            });\n\n          case 3:\n            _JSON$parse = JSON.parse(config.data), email = _JSON$parse.email;\n            user = userList.find(function (u) {\n              return u.email === email;\n            });\n\n            if (user) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", [400, {\n              message: 'Invalid email or password'\n            }]);\n\n          case 7:\n            accessToken = jwt.sign({\n              userId: user.id\n            }, JWT_SECRET, {\n              expiresIn: JWT_VALIDITY\n            });\n            return _context.abrupt(\"return\", [200, {\n              accessToken: accessToken,\n              user: {\n                id: user.id,\n                avatar: user.avatar,\n                email: user.email,\n                name: user.name,\n                role: user.role\n              }\n            }]);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n            return _context.abrupt(\"return\", [500, {\n              message: 'Internal server error'\n            }]);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nMock.onPost('/api/auth/register').reply(function (config) {\n  try {\n    var _JSON$parse2 = JSON.parse(config.data),\n        email = _JSON$parse2.email,\n        username = _JSON$parse2.username;\n\n    var user = userList.find(function (u) {\n      return u.email === email;\n    });\n\n    if (user) {\n      return [400, {\n        message: 'User already exists!'\n      }];\n    }\n\n    var newUser = {\n      id: 2,\n      role: 'GUEST',\n      name: '',\n      username: username,\n      email: email,\n      avatar: '/assets/images/face-6.jpg',\n      age: 25\n    };\n    userList.push(newUser);\n    var accessToken = jwt.sign({\n      userId: newUser.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_VALIDITY\n    });\n    return [200, {\n      accessToken: accessToken,\n      user: {\n        id: newUser.id,\n        avatar: newUser.avatar,\n        email: newUser.email,\n        name: newUser.name,\n        username: newUser.username,\n        role: newUser.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nMock.onGet('/api/auth/profile').reply(function (config) {\n  try {\n    var Authorization = config.headers.Authorization;\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Invalid Authorization token'\n      }];\n    }\n\n    var accessToken = Authorization.split(' ')[1];\n\n    var _jwt$verify = jwt.verify(accessToken, JWT_SECRET),\n        userId = _jwt$verify.userId;\n\n    var user = userList.find(function (u) {\n      return u.id === userId;\n    });\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid authorization token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"names":["jwt","Mock","JWT_SECRET","JWT_VALIDITY","userList","id","role","name","username","email","avatar","age","onPost","reply","config","Promise","resolve","setTimeout","JSON","parse","data","user","find","u","message","accessToken","sign","userId","expiresIn","console","error","newUser","push","err","onGet","Authorization","headers","split","verify"],"sources":["F:/Do An Tot Nghiep/FE/src/fake-db/db/auth.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport Mock from '../mock';\r\n\r\nconst JWT_SECRET = 'jwt_secret_key';\r\nconst JWT_VALIDITY = '7 days';\r\n\r\nconst userList = [\r\n  {\r\n    id: 1,\r\n    role: 'ADMIN',\r\n    name: 'Jason Alexander',\r\n    username: 'jason_alexander',\r\n    email: 'jason@ui-lib.com',\r\n    avatar: '/assets/images/face-6.jpg',\r\n    age: 25,\r\n  },\r\n];\r\n\r\n// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\r\n// YOU NEED TO BUILD YOUR OWN SERVER\r\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\r\n// CONTACT US AT support@ui-lib.com\r\n\r\nMock.onPost('/api/auth/login').reply(async (config) => {\r\n  try {\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    const { email } = JSON.parse(config.data);\r\n    const user = userList.find((u) => u.email === email);\r\n\r\n    if (!user) {\r\n      return [400, { message: 'Invalid email or password' }];\r\n    }\r\n    const accessToken = jwt.sign({ userId: user.id }, JWT_SECRET, {\r\n      expiresIn: JWT_VALIDITY,\r\n    });\r\n\r\n    return [\r\n      200,\r\n      {\r\n        accessToken,\r\n        user: {\r\n          id: user.id,\r\n          avatar: user.avatar,\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role,\r\n        },\r\n      },\r\n    ];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n\r\nMock.onPost('/api/auth/register').reply((config) => {\r\n  try {\r\n    const { email, username } = JSON.parse(config.data);\r\n    const user = userList.find((u) => u.email === email);\r\n\r\n    if (user) {\r\n      return [400, { message: 'User already exists!' }];\r\n    }\r\n    const newUser = {\r\n      id: 2,\r\n      role: 'GUEST',\r\n      name: '',\r\n      username: username,\r\n      email: email,\r\n      avatar: '/assets/images/face-6.jpg',\r\n      age: 25,\r\n    };\r\n    userList.push(newUser);\r\n\r\n    const accessToken = jwt.sign({ userId: newUser.id }, JWT_SECRET, {\r\n      expiresIn: JWT_VALIDITY,\r\n    });\r\n\r\n    return [\r\n      200,\r\n      {\r\n        accessToken,\r\n        user: {\r\n          id: newUser.id,\r\n          avatar: newUser.avatar,\r\n          email: newUser.email,\r\n          name: newUser.name,\r\n          username: newUser.username,\r\n          role: newUser.role,\r\n        },\r\n      },\r\n    ];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n\r\nMock.onGet('/api/auth/profile').reply((config) => {\r\n  try {\r\n    const { Authorization } = config.headers;\r\n    if (!Authorization) {\r\n      return [401, { message: 'Invalid Authorization token' }];\r\n    }\r\n\r\n    const accessToken = Authorization.split(' ')[1];\r\n    const { userId } = jwt.verify(accessToken, JWT_SECRET);\r\n    const user = userList.find((u) => u.id === userId);\r\n\r\n    if (!user) {\r\n      return [401, { message: 'Invalid authorization token' }];\r\n    }\r\n\r\n    return [\r\n      200,\r\n      {\r\n        user: {\r\n          id: user.id,\r\n          avatar: user.avatar,\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role,\r\n        },\r\n      },\r\n    ];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}