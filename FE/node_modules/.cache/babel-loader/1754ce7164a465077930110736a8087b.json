{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { DesktopDatePicker as XDesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar warnedOnce = false;\n\nvar warn = function warn() {\n  if (!warnedOnce) {\n    console.warn(['MUI: The DesktopDatePicker component was moved from `@mui/lab` to `@mui/x-date-pickers`.', 'The component will no longer be exported from `@mui/lab` in the first release of July 2022.', '', \"You should use `import { DesktopDatePicker } from '@mui/x-date-pickers'`\", \"or `import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker'`\", '', 'More information about this migration on our blog: https://mui.com/blog/lab-date-pickers-to-mui-x/.'].join('\\n'));\n    warnedOnce = true;\n  }\n};\n/**\n * @ignore - do not document.\n */\n\n\nvar DesktopDatePicker = /*#__PURE__*/React.forwardRef(function DeprecatedDesktopDatePicker(props, ref) {\n  warn();\n  return /*#__PURE__*/_jsx(XDesktopDatePicker, _extends({\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDatePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use an HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    leftArrowButton: PropTypes.object,\n    rightArrowButton: PropTypes.object,\n    switchViewButton: PropTypes.object\n  }),\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TDateValue\n   * @param {ParseableDate<TDateValue>} value The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDateValue>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TDateValue\n   * @param {TDateValue} date The date that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TDateValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TDateValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDates The dates currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to check.\n   * @returns {boolean} If `true` the day will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Return `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;\nexport default DesktopDatePicker;","map":{"version":3,"names":["_extends","React","PropTypes","DesktopDatePicker","XDesktopDatePicker","jsx","_jsx","warnedOnce","warn","console","join","forwardRef","DeprecatedDesktopDatePicker","props","ref","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowSameDateSelection","bool","autoFocus","children","node","className","string","clearable","clearText","components","shape","LeftArrowButton","elementType","LeftArrowIcon","OpenPickerIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","leftArrowButton","object","rightArrowButton","switchViewButton","defaultCalendarMonth","any","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","current","label","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","onChange","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","onYearChange","open","OpenPickerButtonProps","openTo","oneOf","orientation","PaperProps","PopperProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","TransitionComponent","value","Date","number","views","arrayOf"],"sources":["F:/Do An Tot Nghiep/FE/node_modules/@mui/lab/DesktopDatePicker/DesktopDatePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { DesktopDatePicker as XDesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nlet warnedOnce = false;\n\nconst warn = () => {\n  if (!warnedOnce) {\n    console.warn(['MUI: The DesktopDatePicker component was moved from `@mui/lab` to `@mui/x-date-pickers`.', 'The component will no longer be exported from `@mui/lab` in the first release of July 2022.', '', \"You should use `import { DesktopDatePicker } from '@mui/x-date-pickers'`\", \"or `import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker'`\", '', 'More information about this migration on our blog: https://mui.com/blog/lab-date-pickers-to-mui-x/.'].join('\\n'));\n    warnedOnce = true;\n  }\n};\n\n/**\n * @ignore - do not document.\n */\nconst DesktopDatePicker = /*#__PURE__*/React.forwardRef(function DeprecatedDesktopDatePicker(props, ref) {\n  warn();\n  return /*#__PURE__*/_jsx(XDesktopDatePicker, _extends({\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDatePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use an HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    leftArrowButton: PropTypes.object,\n    rightArrowButton: PropTypes.object,\n    switchViewButton: PropTypes.object\n  }),\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TDateValue\n   * @param {ParseableDate<TDateValue>} value The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDateValue>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TDateValue\n   * @param {TDateValue} date The date that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TDateValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TDateValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDates The dates currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to check.\n   * @returns {boolean} If `true` the day will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Return `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;\nexport default DesktopDatePicker;"],"mappings":"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"},"metadata":{},"sourceType":"module"}