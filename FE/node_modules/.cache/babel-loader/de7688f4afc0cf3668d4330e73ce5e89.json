{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\n/**\n * core component for echarts binding\n */\n\nvar EChartsReactCore =\n/** @class */\nfunction (_super) {\n  __extends(EChartsReactCore, _super);\n\n  function EChartsReactCore(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.echarts = props.echarts;\n    _this.ele = null;\n    _this.isInitialResize = true;\n    return _this;\n  }\n\n  EChartsReactCore.prototype.componentDidMount = function () {\n    this.renderNewEcharts();\n  }; // update\n\n\n  EChartsReactCore.prototype.componentDidUpdate = function (prevProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    var shouldSetOption = this.props.shouldSetOption;\n\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    } // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n\n\n    if (!isEqual(prevProps.theme, this.props.theme) || !isEqual(prevProps.opts, this.props.opts) || !isEqual(prevProps.onEvents, this.props.onEvents)) {\n      this.dispose();\n      this.renderNewEcharts(); // 重建\n\n      return;\n    } // when these props are not isEqual, update echarts\n\n\n    var pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n    /**\n     * when style or class name updated, change size.\n     */\n\n\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  };\n\n  EChartsReactCore.prototype.componentWillUnmount = function () {\n    this.dispose();\n  };\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n\n\n  EChartsReactCore.prototype.getEchartsInstance = function () {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  };\n  /**\n   * dispose echarts and clear size-sensor\n   */\n\n\n  EChartsReactCore.prototype.dispose = function () {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      } // dispose echarts instance\n\n\n      this.echarts.dispose(this.ele);\n    }\n  };\n  /**\n   * render a new echarts instance\n   */\n\n\n  EChartsReactCore.prototype.renderNewEcharts = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onEvents = _a.onEvents,\n        onChartReady = _a.onChartReady; // 1. new echarts instance\n\n    var echartsInstance = this.updateEChartsOption(); // 2. bind events\n\n    this.bindEvents(echartsInstance, onEvents || {}); // 3. on chart ready\n\n    if (isFunction(onChartReady)) onChartReady(echartsInstance); // 4. on resize\n\n    if (this.ele) {\n      bind(this.ele, function () {\n        _this.resize();\n      });\n    }\n  }; // bind the events\n\n\n  EChartsReactCore.prototype.bindEvents = function (instance, events) {\n    function _bindEvent(eventName, func) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, function (param) {\n          func(param, instance);\n        });\n      }\n    } // loop and bind\n\n\n    for (var eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  };\n  /**\n   * render the echarts\n   */\n\n\n  EChartsReactCore.prototype.updateEChartsOption = function () {\n    var _a = this.props,\n        option = _a.option,\n        _b = _a.notMerge,\n        notMerge = _b === void 0 ? false : _b,\n        _c = _a.lazyUpdate,\n        lazyUpdate = _c === void 0 ? false : _c,\n        showLoading = _a.showLoading,\n        _d = _a.loadingOption,\n        loadingOption = _d === void 0 ? null : _d; // 1. get or initial the echarts object\n\n    var echartInstance = this.getEchartsInstance(); // 2. set the echarts option\n\n    echartInstance.setOption(option, notMerge, lazyUpdate); // 3. set loading mask\n\n    if (showLoading) echartInstance.showLoading(loadingOption);else echartInstance.hideLoading();\n    return echartInstance;\n  };\n  /**\n   * resize wrapper\n   */\n\n\n  EChartsReactCore.prototype.resize = function () {\n    // 1. get the echarts object\n    var echartsInstance = this.getEchartsInstance(); // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    } // 3. update variable for future calls\n\n\n    this.isInitialResize = false;\n  };\n\n  EChartsReactCore.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        style = _a.style,\n        _b = _a.className,\n        className = _b === void 0 ? '' : _b; // default height = 300\n\n    var newStyle = __assign({\n      height: 300\n    }, style);\n\n    return React.createElement(\"div\", {\n      ref: function ref(e) {\n        _this.ele = e;\n      },\n      style: newStyle,\n      className: \"echarts-for-react \" + className\n    });\n  };\n\n  return EChartsReactCore;\n}(PureComponent);\n\nexport default EChartsReactCore;","map":{"version":3,"sources":["../src/core.tsx"],"names":[],"mappings":";AACA,OAAO,KAAP,IAAgB,aAAhB,QAAqC,OAArC;AACA,SAAS,IAAT,EAAe,KAAf,QAA4B,aAA5B;AACA,SAAS,IAAT,QAAqB,eAArB;AACA,SAAS,UAAT,QAA2B,sBAA3B;AACA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,OAAT,QAAwB,mBAAxB;AAGA;;AAEG;;AACH,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAA8C,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;EAgB5C,SAAA,gBAAA,CAAY,KAAZ,EAAoC;IAApC,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;IAGE,KAAI,CAAC,OAAL,GAAe,KAAK,CAAC,OAArB;IACA,KAAI,CAAC,GAAL,GAAW,IAAX;IACA,KAAI,CAAC,eAAL,GAAuB,IAAvB;;EACD;;EAED,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;IACE,KAAK,gBAAL;EACD,CAFD,CAxBF,CA4BE;;;EACA,gBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,SAAnB,EAA+C;IAC7C;;;AAGG;IACK,IAAA,eAAe,GAAK,KAAK,KAAL,CAAL,eAAf;;IACR,IAAI,UAAU,CAAC,eAAD,CAAV,IAA+B,CAAC,eAAe,CAAC,SAAD,EAAY,KAAK,KAAjB,CAAnD,EAA4E;MAC1E;IACD,CAR4C,CAU7C;IACA;IACA;IACA;;;IACA,IACE,CAAC,OAAO,CAAC,SAAS,CAAC,KAAX,EAAkB,KAAK,KAAL,CAAW,KAA7B,CAAR,IACA,CAAC,OAAO,CAAC,SAAS,CAAC,IAAX,EAAiB,KAAK,KAAL,CAAW,IAA5B,CADR,IAEA,CAAC,OAAO,CAAC,SAAS,CAAC,QAAX,EAAqB,KAAK,KAAL,CAAW,QAAhC,CAHV,EAIE;MACA,KAAK,OAAL;MAEA,KAAK,gBAAL,GAHA,CAGyB;;MACzB;IACD,CAvB4C,CAyB7C;;;IACA,IAAM,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,EAAuB,YAAvB,EAAqC,aAArC,EAAoD,eAApD,CAAjB;;IACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,KAAN,EAAa,QAAb,CAAL,EAA6B,IAAI,CAAC,SAAD,EAAY,QAAZ,CAAjC,CAAZ,EAAqE;MACnE,KAAK,mBAAL;IACD;IAED;;AAEG;;;IACH,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAX,EAAkB,KAAK,KAAL,CAAW,KAA7B,CAAR,IAA+C,CAAC,OAAO,CAAC,SAAS,CAAC,SAAX,EAAsB,KAAK,KAAL,CAAW,SAAjC,CAA3D,EAAwG;MACtG,KAAK,MAAL;IACD;EACF,CArCD;;EAuCA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;IACE,KAAK,OAAL;EACD,CAFD;EAIA;;;;AAIG;;;EACI,gBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;IACE,OAAO,KAAK,OAAL,CAAa,gBAAb,CAA8B,KAAK,GAAnC,KAA2C,KAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,GAAvB,EAA4B,KAAK,KAAL,CAAW,KAAvC,EAA8C,KAAK,KAAL,CAAW,IAAzD,CAAlD;EACD,CAFM;EAIP;;AAEG;;;EACK,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAR,YAAA;IACE,IAAI,KAAK,GAAT,EAAc;MACZ,IAAI;QACF,KAAK,CAAC,KAAK,GAAN,CAAL;MACD,CAFD,CAEE,OAAO,CAAP,EAAU;QACV,OAAO,CAAC,IAAR,CAAa,CAAb;MACD,CALW,CAMZ;;;MACA,KAAK,OAAL,CAAa,OAAb,CAAqB,KAAK,GAA1B;IACD;EACF,CAVO;EAYR;;AAEG;;;EACK,gBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACQ,IAAA,EAAA,GAA6B,KAAK,KAAlC;IAAA,IAAE,QAAQ,GAAA,EAAA,CAAA,QAAV;IAAA,IAAY,YAAY,GAAA,EAAA,CAAA,YAAxB,CADR,CAGE;;IACA,IAAM,eAAe,GAAG,KAAK,mBAAL,EAAxB,CAJF,CAME;;IACA,KAAK,UAAL,CAAgB,eAAhB,EAAiC,QAAQ,IAAI,EAA7C,EAPF,CASE;;IACA,IAAI,UAAU,CAAC,YAAD,CAAd,EAA8B,YAAY,CAAC,eAAD,CAAZ,CAVhC,CAYE;;IACA,IAAI,KAAK,GAAT,EAAc;MACZ,IAAI,CAAC,KAAK,GAAN,EAAW,YAAA;QACb,KAAI,CAAC,MAAL;MACD,CAFG,CAAJ;IAGD;EACF,CAlBO,CAnGV,CAuHE;;;EACQ,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,QAAnB,EAA6B,MAA7B,EAAkE;IAChE,SAAS,UAAT,CAAoB,SAApB,EAAuC,IAAvC,EAAqD;MACnD;MACA,IAAI,QAAQ,CAAC,SAAD,CAAR,IAAuB,UAAU,CAAC,IAAD,CAArC,EAA6C;QAC3C;QACA,QAAQ,CAAC,EAAT,CAAY,SAAZ,EAAuB,UAAC,KAAD,EAAM;UAC3B,IAAI,CAAC,KAAD,EAAQ,QAAR,CAAJ;QACD,CAFD;MAGD;IACF,CAT+D,CAWhE;;;IACA,KAAK,IAAM,SAAX,IAAwB,MAAxB,EAAgC;MAC9B,IAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAArC,EAA6C,SAA7C,CAAJ,EAA6D;QAC3D,UAAU,CAAC,SAAD,EAAY,MAAM,CAAC,SAAD,CAAlB,CAAV;MACD;IACF;EACF,CAjBO;EAmBR;;AAEG;;;EACK,gBAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,YAAA;IACQ,IAAA,EAAA,GAAsF,KAAK,KAA3F;IAAA,IAAE,MAAM,GAAA,EAAA,CAAA,MAAR;IAAA,IAAU,EAAA,GAAA,EAAA,CAAA,QAAV;IAAA,IAAU,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAA1B;IAAA,IAA4B,EAAA,GAAA,EAAA,CAAA,UAA5B;IAAA,IAA4B,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAA9C;IAAA,IAAgD,WAAW,GAAA,EAAA,CAAA,WAA3D;IAAA,IAA6D,EAAA,GAAA,EAAA,CAAA,aAA7D;IAAA,IAA6D,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAAjF,CADR,CAEE;;IACA,IAAM,cAAc,GAAG,KAAK,kBAAL,EAAvB,CAHF,CAIE;;IACA,cAAc,CAAC,SAAf,CAAyB,MAAzB,EAAiC,QAAjC,EAA2C,UAA3C,EALF,CAME;;IACA,IAAI,WAAJ,EAAiB,cAAc,CAAC,WAAf,CAA2B,aAA3B,EAAjB,KACK,cAAc,CAAC,WAAf;IAEL,OAAO,cAAP;EACD,CAXO;EAaR;;AAEG;;;EACK,gBAAA,CAAA,SAAA,CAAA,MAAA,GAAR,YAAA;IACE;IACA,IAAM,eAAe,GAAG,KAAK,kBAAL,EAAxB,CAFF,CAIE;IACA;;IACA,IAAI,CAAC,KAAK,eAAV,EAA2B;MACzB,IAAI;QACF,eAAe,CAAC,MAAhB;MACD,CAFD,CAEE,OAAO,CAAP,EAAU;QACV,OAAO,CAAC,IAAR,CAAa,CAAb;MACD;IACF,CAZH,CAcE;;;IACA,KAAK,eAAL,GAAuB,KAAvB;EACD,CAhBO;;EAkBR,gBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACQ,IAAA,EAAA,GAA4B,KAAK,KAAjC;IAAA,IAAE,KAAK,GAAA,EAAA,CAAA,KAAP;IAAA,IAAS,EAAA,GAAA,EAAA,CAAA,SAAT;IAAA,IAAS,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAAvB,CADR,CAEE;;IACA,IAAM,QAAQ,GAAA,QAAA,CAAA;MAAK,MAAM,EAAE;IAAb,CAAA,EAAqB,KAArB,CAAd;;IAEA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MACE,GAAG,EAAE,aAAC,CAAD,EAAe;QAClB,KAAI,CAAC,GAAL,GAAW,CAAX;MACD,CAHH;MAIE,KAAK,EAAE,QAJT;MAKE,SAAS,EAAE,uBAAqB;IALlC,CAAA,CADF;EASD,CAdD;;EAeF,OAAA,gBAAA;AAAC,CA/LD,CAA8C,aAA9C,CAAA","sourcesContent":["import type { ECharts } from 'echarts';\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\nimport { EChartsReactProps, EChartsInstance } from './types';\n\n/**\n * core component for echarts binding\n */\nexport default class EChartsReactCore extends PureComponent<EChartsReactProps> {\n  /**\n   * echarts render container\n   */\n  public ele: HTMLElement;\n\n  /**\n   * if this is the first time we are resizing\n   */\n  private isInitialResize: boolean;\n\n  /**\n   * echarts library entry\n   */\n  protected echarts: any;\n\n  constructor(props: EChartsReactProps) {\n    super(props);\n\n    this.echarts = props.echarts;\n    this.ele = null;\n    this.isInitialResize = true;\n  }\n\n  componentDidMount() {\n    this.renderNewEcharts();\n  }\n\n  // update\n  componentDidUpdate(prevProps: EChartsReactProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    const { shouldSetOption } = this.props;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (\n      !isEqual(prevProps.theme, this.props.theme) ||\n      !isEqual(prevProps.opts, this.props.opts) ||\n      !isEqual(prevProps.onEvents, this.props.onEvents)\n    ) {\n      this.dispose();\n\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n\n    // when these props are not isEqual, update echarts\n    const pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.dispose();\n  }\n\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  public getEchartsInstance(): ECharts {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  }\n\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  private dispose() {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  }\n\n  /**\n   * render a new echarts instance\n   */\n  private renderNewEcharts() {\n    const { onEvents, onChartReady } = this.props;\n\n    // 1. new echarts instance\n    const echartsInstance = this.updateEChartsOption();\n\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, () => {\n        this.resize();\n      });\n    }\n  }\n\n  // bind the events\n  private bindEvents(instance, events: EChartsReactProps['onEvents']) {\n    function _bindEvent(eventName: string, func: Function) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, (param) => {\n          func(param, instance);\n        });\n      }\n    }\n\n    // loop and bind\n    for (const eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  }\n\n  /**\n   * render the echarts\n   */\n  private updateEChartsOption(): EChartsInstance {\n    const { option, notMerge = false, lazyUpdate = false, showLoading, loadingOption = null } = this.props;\n    // 1. get or initial the echarts object\n    const echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);\n    else echartInstance.hideLoading();\n\n    return echartInstance;\n  }\n\n  /**\n   * resize wrapper\n   */\n  private resize() {\n    // 1. get the echarts object\n    const echartsInstance = this.getEchartsInstance();\n\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  }\n\n  render(): JSX.Element {\n    const { style, className = '' } = this.props;\n    // default height = 300\n    const newStyle = { height: 300, ...style };\n\n    return (\n      <div\n        ref={(e: HTMLElement) => {\n          this.ele = e;\n        }}\n        style={newStyle}\n        className={`echarts-for-react ${className}`}\n      />\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}